// <auto-generated />
using System;
using InGreed_API.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InGreed_API.Migrations
{
    [DbContext(typeof(InGreedDataContext))]
    [Migration("20240409085632_User default data")]
    partial class Userdefaultdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InGreed_API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InGreed_API.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("InGreed_API.Models.Opinion", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("InGreed_API.Models.Preference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("PreferenceType")
                        .HasColumnType("int")
                        .HasColumnName("preference_type");

                    b.HasKey("UserId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("InGreed_API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_name");

                    b.Property<int>("ProducentId")
                        .HasColumnType("int")
                        .HasColumnName("producent_id");

                    b.HasKey("Id");

                    b.HasIndex("ProducentId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InGreed_API.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("InGreed_API.Models.ProductIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredient_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductIngredients");
                });

            modelBuilder.Entity("InGreed_API.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasColumnName("end");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasColumnName("start");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("InGreed_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit")
                        .HasColumnName("email_notifications");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mail");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailNotifications = true,
                            Mail = "clientingreed@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECFziXNCSrKgVQUGu4Ius9In7O1dytR+XOgViy8cOrwqdwj6zcjrRJOBS/vPAPJjZg==",
                            Role = 3,
                            Username = "client"
                        },
                        new
                        {
                            Id = 2,
                            EmailNotifications = false,
                            Mail = "clientingreed2@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFMl2ibmxljVgSYUvel1WmE+iB7IbRjl8QeWhf1fA0bhaR0TSaGEwETnWj2z/SjbfA==",
                            Role = 3,
                            Username = "client2"
                        },
                        new
                        {
                            Id = 3,
                            EmailNotifications = true,
                            Mail = "producent@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMzfRediqiZFTiV6Xpz38DYmSUDq3j5hmqbaaTbBrbLVWThkHKG508Iznr/bca8uWg==",
                            Role = 2,
                            Username = "producent"
                        },
                        new
                        {
                            Id = 4,
                            EmailNotifications = false,
                            Mail = "producentingreed2@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFvpaWPRcE+iakhC6p4hHrmq0EOmt3id7vIPU3iMZjNM7aTuAJVsv3yxtLzgG1KHQ==",
                            Role = 2,
                            Username = "producent2"
                        });
                });

            modelBuilder.Entity("InGreed_API.Models.Opinion", b =>
                {
                    b.HasOne("InGreed_API.Models.Product", "Product")
                        .WithMany("Opinions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreed_API.Models.User", "User")
                        .WithMany("Opinions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InGreed_API.Models.Preference", b =>
                {
                    b.HasOne("InGreed_API.Models.Ingredient", "Ingredient")
                        .WithMany("Preferenes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreed_API.Models.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InGreed_API.Models.Product", b =>
                {
                    b.HasOne("InGreed_API.Models.User", "Producent")
                        .WithMany("Products")
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producent");
                });

            modelBuilder.Entity("InGreed_API.Models.ProductCategory", b =>
                {
                    b.HasOne("InGreed_API.Models.Category", "Category")
                        .WithMany("ProductCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreed_API.Models.Product", "Product")
                        .WithMany("ProductCategory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InGreed_API.Models.ProductIngredient", b =>
                {
                    b.HasOne("InGreed_API.Models.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InGreed_API.Models.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InGreed_API.Models.Promotion", b =>
                {
                    b.HasOne("InGreed_API.Models.Product", "Product")
                        .WithOne("Promotion")
                        .HasForeignKey("InGreed_API.Models.Promotion", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InGreed_API.Models.Category", b =>
                {
                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("InGreed_API.Models.Ingredient", b =>
                {
                    b.Navigation("Preferenes");

                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("InGreed_API.Models.Product", b =>
                {
                    b.Navigation("Opinions");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductIngredients");

                    b.Navigation("Promotion")
                        .IsRequired();
                });

            modelBuilder.Entity("InGreed_API.Models.User", b =>
                {
                    b.Navigation("Opinions");

                    b.Navigation("Preferences");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
